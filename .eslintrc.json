{
    "parser": "@typescript-eslint/parser",
    "parserOptions": {
        "ecmaVersion": 12, // Allows for the parsing of modern ECMAScript features
        "sourceType": "module", // Allows for the use of imports
        "ecmaFeatures": {
            "jsx": true // Allows for the parsing of JSX
        }
    },
    "extends": [
        "eslint:recommended",
        "plugin:react/recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:prettier/recommended"
    ],
    "plugins": ["@typescript-eslint", "simple-import-sort", "@stylistic/ts"],
    "rules": {
        "@typescript-eslint/no-unused-vars": "error",
        "@typescript-eslint/no-explicit-any": "error",
        "@typescript-eslint/no-inferrable-types": "error",

        "prettier/prettier": "error",

        // module import sorting
        "simple-import-sort/imports": [
            "error",
            {
                "groups": [
                    // Style imports.
                    ["^.+\\.s?css$", "styled"],

                    // Node.js builtins. You could also generate this regex if you use a `.js` config.
                    // For example: `^(${require("module").builtinModules.join("|")})(/|$)`
                    [
                        "^(assert|buffer|child_process|cluster|console|constants|crypto|dgram|dns|domain|events|fs|http|https|module|net|os|path|punycode|querystring|readline|repl|stream|string_decoder|sys|timers|tls|tty|url|util|vm|zlib|freelist|v8|process|async_hooks|http2|perf_hooks)(/.*|$)"
                    ],
                    // Packages. `react` + `next` related packages come first.
                    ["^react", "^next", "^@?\\w"],
                    // Parent imports. Put `..` last.
                    ["^\\.\\.(?!/?$)", "^\\.\\./?$"],
                    // Other relative imports. Put same-folder imports and `.` last.
                    ["^\\./(?=.*/)(?!/?$)", "^\\.(?!/?$)", "^\\./?$"]
                ]
            }
        ],

        // personal style preferences
        "prefer-const": "error",
        "no-var": "error",
        "@stylistic/ts/quotes": ["error", "single", { "avoidEscape": true }],
        "prefer-destructuring": [
            "error",
            {
                "array": false,
                "object": true
            },
            {
                "enforceForRenamedProperties": false
            }
        ],
        "@typescript-eslint/no-empty-function": "off"
    }
}
